#!/usr/bin/lua

local json = require 'jsonc'
local uci = require('simple-uci').cursor()
local iwinfo = require 'iwinfo'
local ddutil = require 'ffda-domain-director.util'

-- Returns all available WiFi networks on all wireless interfaces
-- https://github.com/FreifunkHochstift/ffho-packages/blob/master/ffho/ffho-autoupdater-wifi-fallback/luasrc/usr/lib/lua/autoupdater-wifi-fallback/util.lua#L5
function get_available_wifi_networks()
  local radios = {}
  uci:foreach('wireless', 'wifi-device',
    function(s)
      -- Start with the assumption we won't use the device
      local use_device = false
      uci:foreach('wireless', 'wifi-iface',
        function (t)
          if (t['device'] == s['.name']) then
            if (t['ifname'] == nil) then
              -- Don't use private WiFi for test scan
              return
            end
            -- Perform test scan to detect possible WiFi hang, which would stall libiwinfo scan forever
            -- Probably needs an upstream fix, but this is pending
            local handle = io.popen("iw dev " ..t['ifname'].." scan > /dev/null 2>&1; echo $?")
            local out_string = handle:read("*a")
            handle:close()
            if tonumber(out_string) == 0 then
              -- Scan successful, use this device for libiwinfo scan
              use_device = true
            end
          end
        end
      )
      if use_device then
        radios[s['.name']] = {}
      end
    end
  )

  for radio, _ in pairs(radios) do
    local wifitype = iwinfo.type(radio)
    local iw = iwinfo[wifitype]
    if not iw then
      return null
    end
    local tmplist = iw.scanlist(radio)
    for _, net in ipairs(tmplist) do
      if net.ssid and net.bssid then
        table.insert (radios[radio], net)
      end
    end
  end
  return radios
end

-- Returns json array-string of supplied wifi networks
function generate_wifi_json(wifis)
  wifi_table = {}
  for k, v in pairs(wifis) do
    for _, wifi in ipairs(v) do
      local single_network = {}
      single_network["bssid"] = wifi.bssid
      single_network["signal"] = wifi.signal
      table.insert(wifi_table, single_network)
    end
  end
  return json.stringify(wifi_table)
end

-- Encodes string to use as HTTP parameter
-- https://gist.github.com/ignisdesign/4323051
function urlencode(str)
   if (str) then
     str = string.gsub (str, "\n", "\r\n")
     str = string.gsub (str, "([^%w ])", function (c) return string.format ("%%%02X", string.byte(c)) end)
     str = string.gsub (str, " ", "+")
   end
   return str
end

-- Queries the director with supplied list of WiFi networks.
-- Returns director response as string.
function query_director(networks)
  local wifi_json = generate_wifi_json(get_available_wifi_networks())
  local handle = io.popen("wget -T 30 -qO -  --post-data=wifis=" ..urlencode(wifi_json) .. " "..ddutil.get_director_url())
  local return_str =  handle:read("*a")
  handle:close()
  return return_str
end

-- Saves target domain in UCI
function save_target_domain(domain_name)
  uci:set("ffda", "director", "target", domain_name)
  uci:commit("ffda")
end

-- Saves switch-after time (as UNIX epoch) in UCI
function save_switch_time(switch_time)
  uci:set("ffda", "director", "switch_after", switch_time)
  uci:commit("ffda")
end

-- Updates target domain by querying a remote director
function update_domain()
  local response = json.parse(query_director())
  if response == nil then
    print("Received invalid response. Exiting.")
    return
  end
  local domain = response.node_information.domain.name
  local switch_time = response.node_information.domain.switch_time

  if ddutil.firmware_is_multidomain() then
    if ddutil.check_domain_exists(domain) then
      print("Domain "..domain.." is valid, setting as proposed domain")
    else
      print("Domain "..domain.." is invalid, aborting")
      return
    end
  else
    print("Firmware has no multidomain support. Skipping domain validation.")
  end

  save_target_domain(domain)
  save_switch_time(switch_time)
end

if not ddutil.is_enabled() then
  print("Domain director is disabled.")
  return
end

update_domain()
