#!/usr/bin/lua

local json = require 'jsonc'
local liblocation = require 'ffda-location'
local unistd = require 'posix.unistd'
local site = require 'gluon.site'
local uci = require('simple-uci').cursor()
local util = require 'gluon.util'

function get_arg(argument)
	local val = false
	for _, v in ipairs(arg) do
		if val then
			return v
		end
		if v == argument then
			val = true
		end
	end
	return val
end

function set_location(lat, lon)
	local uci = require('simple-uci').cursor()
	local location = uci:get_first("gluon-node-info", "location")
	uci:set("gluon-node-info", location, "latitude", lat)
	uci:set("gluon-node-info", location, "longitude", lon)
	uci:commit("gluon-node-info")
end

function haversine(lat1, lon1, lat2, lon2)
	-- convert decimal degrees to radians
	local lat1 = math.rad(lat1)
	local lon1 = math.rad(lon1)
	local lat2 = math.rad(lat2)
	local lon2 = math.rad(lon2)

	-- haversine formula
	local dlon = lon2 - lon1
	local dlat = lat2 - lat1
	local a = math.pow(math.sin(dlat / 2), 2) + math.cos(lat1) * math.cos(lat2) * math.pow(math.sin(dlon / 2), 2)
	local c = 2 * math.asin(math.sqrt(a))
	-- radius of earth in kilometers is 6371
	local km = 6371 * c
	local m = km * 1000
	return m
end

function distance_from_current(lat, lon)
	local uci = require('simple-uci').cursor()
	local location = uci:get_first("gluon-node-info", "location")
	local clat = uci:get("gluon-node-info", location, "latitude")
	local clon = uci:get("gluon-node-info", location, "longitude")
	if clat == nil or clon == nil then
		return nil
	end
	return haversine(lat, lon, clat, clon)
end

function get_locator_url()
	return site.geolocator.url()
end

function get_last_update()
	local update_flag_path = "/tmp/ffmuc_location_set"

	if not unistd.access(update_flag_path) then
		return nil
	end

	local f = io.open(update_flag_path)
	if not f then
		return nil
	end
	local last_update = f:read('*a')
	f:close()

	return tonumber(last_update)
end

if get_arg("--cron") then
	if not uci:get_bool("ffmuc", "geolocator", "enabled") then
		return
	end

	local update_interval = uci:get("ffmuc", "geolocator", "update_interval")
	local last_update = get_last_update()

	if last_update ~= nil and util.get_uptime() - last_update < (tonumber(update_interval) * 60) then
		return
	end
end

local response_str = liblocation.query_remote(get_locator_url())
local loc = json.parse(response_str)
if loc == nil then
	print("Received invalid response. Exiting.")
	return
end

print("Position: " .. loc.location.lat .. ", " .. loc.location.lon)
print("Accuracy: " .. loc.location.accuracy)
print("---")
print("https://www.openstreetmap.org/?mlat=" .. loc.location.lat .. "&mlon=" .. loc.location.lon .. "#map=18/" .. loc.location.lat .. "/" .. loc.location.lon)
print("https://www.google.com/maps/search/?api=1&query=" .. loc.location.lat .. "," .. loc.location.lon)

local min_accuracy = nil
local min_distance = 0

if get_arg("--set-location") then
	min_accuracy = get_arg("--min-accuracy")
elseif get_arg("--cron") then
	min_accuracy = uci:get("ffmuc", "geolocator", "min_accuracy")
	min_distance = tonumber(uci:get('ffmuc', 'geolocator', 'min_distance'))
	local f = io.open("/tmp/ffmuc_location_set", 'w')
	f:write(util.get_uptime())
	f:close()
else
	return
end

if min_accuracy and tonumber(min_accuracy) < loc.location.accuracy then
	print("Determined location is not accurate enough.")
	return
end

local distance = distance_from_current(loc.location.lat, loc.location.lon)

if not (distance == nil) then
	print("Determined position is " .. math.floor(distance+0.5) .. " meters from currently set position away.")
	if (distance < min_distance) then
		print("Determined position has to be at least " .. min_distance .. " meters away to be saved.")
		return
	end
end

set_location(loc.location.lat, loc.location.lon)
print("Location saved.")
